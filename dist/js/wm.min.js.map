{"version":3,"sources":["wm.coffee","wm.js"],"names":["window","document","Button","Caption","Combo","Control","Desktop","Dialog","Edit","EventHandler","FakeMap","Footer","FormControl","Group","Label","Memo","Progress","Tabs","TextBox","createElement","createEvent","createTextNode","ctlMap","setActive","setRole","setRoleAll","tag","parent","cls","html","attrs","e","k","p","v","className","innerHTML","style","setAttribute","appendChild","text","node","el","role","l","len","length","classList","contains","active","type","evt","initEvent","el1","self","_classCallCheck","this","list","dispatcher","listener","ref","results","push","call","prototype","on","addEventListener","off","a","index","indexOf","splice","removeEventListener","trigger","event","dispatchEvent","opts","body","zindex","owner","modal","desktop","overlay","_getClientSize","s","parentNode","getComputedStyle","width","parseInt","innerWidth","height","innerHeight","_moveElement","x","y","left","top","_adjustLocation","_resizeElement","cx","cy","_moveToCentre","rect","size","getBoundingClientRect","offsetLeft","offsetTop","dlg","i","equals","newDialog","t","title","MAX_DLGS","css","zIndex","_zIndex","_update","destroy","removeChild","_destroyInternal","_deleteDialog","_bringToTop","ub","_notifyOwner","_setState","_notify","child","dragging","mouseDownHandler","mouseMoveHandler","mouseUpHandler","offset_x","offset_y","_this","_possibleConstructorReturn","_EventHandler","querySelector","close","elemRect","titleRect","button","target","isSameNode","offsetX","offsetY","preventDefault","clientX","clientY","_inherits","_Control","outer","_this2","_EventHandler2","add","_this5","_FormControl","getAttribute","_this4","_Control2","Object","defineProperty","get","value","set","_this6","_FormControl2","max","old","outerHTML","insertBefore","_this7","_FormControl3","_this9","_TextBox","_this8","_FormControl4","_this10","_TextBox2","_this11","_Control3","pages","tabs","_this12","querySelectorAll","j","len1","m","_Control4","_Control5",".wm-lbl",".wm-btn,button","select","input:not([type]),input[type=text],input[type=password],input[type=email]","textarea","fieldset",".wm-tabs","progress",".wm-footer","lastIndex","map","attr","Date","now","val","T","selector","_this14","centre","onResize","_autoMove","_activate","_accessData","_setResizeListener","src","move","resize","activate","find","findAll","c","result","bind","forEach","unbind","_isChildOrSelf","zi","first","focus"],"mappings":"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","file":"wm.min.js","sourcesContent":["do (window, document) ->\r\n    ZIND_FIRST = 10000\r\n    MAX_DLGS = 100\r\n\r\n    createElement = (tag, parent, cls, html, attrs) ->\r\n        e = document.createElement tag\r\n        e.className = cls\r\n        if typeof html is 'string'\r\n            e.innerHTML = html\r\n        else\r\n            attrs = html\r\n        if attrs\r\n            for k of attrs\r\n                v = attrs[k]\r\n                if k is 'css'\r\n                    for p of v\r\n                        e.style[p] = v[p]\r\n                else\r\n                    e.setAttribute k, v\r\n        parent.appendChild e if parent?\r\n        return e\r\n\r\n    createTextNode = (text, parent) ->\r\n        node = document.createTextNode text\r\n        parent.appendChild node\r\n        return node\r\n\r\n    setRole = (el, role) ->\r\n        el.setAttribute 'role', role\r\n        return\r\n\r\n    setRoleAll = (el, role) ->\r\n        setRole e, role for e in el\r\n        return\r\n\r\n    isActive = (el) ->\r\n        el.classList.contains 'wm-active'\r\n\r\n    setActive = (el, active) ->\r\n        # IE doesn't support classList.toggle()\r\n        el.classList[if active then 'add' else 'remove']('wm-active')\r\n        return\r\n\r\n    createEvent = (type) ->\r\n        evt = document.createEvent 'Event'\r\n        evt.initEvent type, false, true\r\n        return evt\r\n\r\n    class EventHandler\r\n        constructor: (@el) ->\r\n            self = this\r\n            @list = {}\r\n            @dispatcher = (e) ->\r\n                for listener in self.list[e.type]\r\n                    listener.call self, e\r\n\r\n        on: (type, listener) ->\r\n            unless @list[type]\r\n                @list[type] = []\r\n                @el.addEventListener type, @dispatcher, false\r\n            @list[type].push listener\r\n            this\r\n\r\n        off: (type, listener) ->\r\n            if @list[type]\r\n                a = @list[type]\r\n                index = a.indexOf listener\r\n                if index isnt -1\r\n                    a.splice index, 1\r\n                    unless a.length\r\n                        @list[type] = undefined\r\n                        @el.removeEventListener type, @dispatcher, false\r\n            this\r\n\r\n        trigger: (event) ->\r\n            if typeof event is 'string'\r\n                event = createEvent(event)\r\n            @el.dispatchEvent event\r\n            this\r\n\r\n    class Desktop\r\n        constructor: (opts) ->\r\n            opts = opts or {}\r\n            @parent = opts.node or document.body\r\n            @zindex = if opts.owner then opts.owner.zindex + 1 else 0\r\n            @owner = opts.owner\r\n            @list = []\r\n            @modal = !!(opts.modal or opts.owner)\r\n            @desktop = null\r\n            @overlay = null\r\n            @active = true\r\n\r\n        _getClientSize: () ->\r\n            s = {}\r\n            if document.body\r\n                unless @desktop and @desktop.parentNode\r\n                    @desktop = createElement 'div', @parent, 'wm-desktop'\r\n                s = window.getComputedStyle? @desktop\r\n            return {\r\n                width: parseInt(s.width) or window.innerWidth,\r\n                height: parseInt(s.height) or window.innerHeight\r\n            }\r\n\r\n        _moveElement: (el, x, y) ->\r\n            style = el.style\r\n            x += 'px' if typeof x == 'number'\r\n            y += 'px' if typeof y == 'number'\r\n            style.left = x\r\n            style.top = y\r\n            @_adjustLocation el\r\n            return\r\n\r\n        _resizeElement: (el, cx, cy) ->\r\n            style = el.style\r\n            cx += 'px' if typeof cx == 'number'\r\n            style.width = cx\r\n            if cy?\r\n                cy += 'px' if typeof cy == 'number'\r\n                style.height = cy\r\n            @_adjustLocation el\r\n            return\r\n\r\n        _moveToCentre: (el) ->\r\n            rect = el.getBoundingClientRect()\r\n            size = @_getClientSize()\r\n            x = ((size.width - rect.width) / 2) | 0\r\n            y = ((size.height - rect.height) / 2) | 0\r\n            @_moveElement el, x, y\r\n            return\r\n\r\n        _adjustLocation: (el) ->\r\n            x = el.offsetLeft\r\n            y = el.offsetTop\r\n            rect = el.getBoundingClientRect()\r\n            size = @_getClientSize()\r\n            if x + rect.width > size.width\r\n                x = size.width - rect.width\r\n            if x < 0\r\n                x = 0\r\n            if y + rect.height > size.height\r\n                y = size.height - rect.height\r\n            if y < 0\r\n                y = 0\r\n            el.style.left = x + 'px'\r\n            el.style.top  = y + 'px'\r\n            return\r\n\r\n        indexOf: (dlg) ->\r\n            for d, i in @list\r\n                if d.equals dlg\r\n                    return i\r\n            return -1\r\n\r\n        newDialog: (body, opts) ->\r\n            if @list.length >= (MAX_DLGS - 1)\r\n                throw 'Maximum windows exceeded'\r\n            if @modal and !@overlay\r\n                @overlay = createElement 'div', @parent, 'wm-modal', {\r\n                    css: { zIndex: @_zIndex(0) }\r\n                }\r\n            return unless body\r\n            title = if opts?.title? then opts.title else opts\r\n            unless title?\r\n                title = document.title\r\n            el = createElement 'form', @parent, 'wm-dlg'\r\n            t = createElement 'div', el, 'wm-title'\r\n            createTextNode title, t\r\n            createElement 'div', el, 'wm-body', body\r\n            dlg = new Dialog(this, el)\r\n            @list.push dlg\r\n            @_update()\r\n            return dlg\r\n\r\n        destroy: ->\r\n            for dlg in @list\r\n                @parent.removeChild dlg.el\r\n            @_destroyInternal()\r\n            return\r\n\r\n        _deleteDialog: (dlg) ->\r\n            index = @indexOf dlg\r\n            if index != -1\r\n                @parent.removeChild dlg.el\r\n                @list.splice index, 1\r\n                @_update()\r\n                if @list.length == 0\r\n                    @_destroyInternal()\r\n            return\r\n\r\n        _destroyInternal: ->\r\n            if @desktop\r\n                @parent.removeChild @desktop\r\n                @desktop = null\r\n            if @overlay\r\n                @parent.removeChild @overlay\r\n                @overlay = null\r\n            return\r\n\r\n        _bringToTop: (dlg, evt) ->\r\n            index = @indexOf dlg\r\n            if index != -1\r\n                @list.push @list.splice(index, 1)[0]\r\n                @_update evt\r\n            return\r\n\r\n        _zIndex: (i) ->\r\n            return ZIND_FIRST + @zindex * MAX_DLGS + i\r\n\r\n        _update: (evt) ->\r\n            @_notifyOwner()\r\n            ub = @list.length - 1\r\n            for d, i in @list\r\n                d._setState @_zIndex(i + 1), @active and i >= ub, evt\r\n            return\r\n\r\n        _notify: (child) ->\r\n            active = child.list.length == 0\r\n            if @active isnt active\r\n                @active = active\r\n                @_update()\r\n\r\n        _notifyOwner: ->\r\n            @owner._notify this if @owner\r\n\r\n    class Caption extends EventHandler\r\n        constructor: (owner, el) ->\r\n            super(el)\r\n            dragging = no\r\n            offset_x = 0\r\n            offset_y = 0\r\n            title = el.querySelector '.wm-title'\r\n\r\n            @close = createElement 'button', title, 'wm-close', title: 'Close'\r\n            @close.addEventListener 'click', =>\r\n                @trigger 'wm.close'\r\n                return\r\n            , false\r\n\r\n            mouseDownHandler = (e) ->\r\n                if e.button is 0 and e.target.isSameNode title\r\n                    titleRect = title.getBoundingClientRect()\r\n                    elemRect = el.getBoundingClientRect()\r\n                    dragging = yes\r\n                    offset_x = elemRect.left - titleRect.left - e.offsetX\r\n                    offset_y = elemRect.top  - titleRect.top  - e.offsetY\r\n                    document.addEventListener 'mousemove', mouseMoveHandler, false\r\n                    document.addEventListener 'mouseup', mouseUpHandler, false\r\n                    e.preventDefault()\r\n                return\r\n\r\n            mouseMoveHandler = (e) ->\r\n                if dragging\r\n                    owner._moveElement el, offset_x + e.clientX, offset_y + e.clientY\r\n                    e.preventDefault()\r\n                return\r\n\r\n            mouseUpHandler = () ->\r\n                if dragging\r\n                    document.removeEventListener 'mousemove', mouseMoveHandler, false\r\n                    document.removeEventListener 'mouseup', mouseUpHandler, false\r\n                    rect = el.getBoundingClientRect()\r\n                    el.style.left = rect.left + 'px'\r\n                    el.style.top  = rect.top  + 'px'\r\n                    dragging = no\r\n                return\r\n\r\n            title.addEventListener 'mousedown', mouseDownHandler, false\r\n\r\n    class Control extends EventHandler\r\n        constructor: (el, role, outer) ->\r\n            super(el)\r\n            (outer or el).classList.add 'wm-ctl'\r\n            setRole el, role if role?\r\n\r\n    class Label extends Control\r\n        constructor: (el) ->\r\n            super(el)\r\n\r\n    class FormControl extends Control\r\n        constructor: (el, role, outer) ->\r\n            super(el, role, outer)\r\n            el.classList.add 'wm-ctl-form'\r\n            Object.defineProperty this, 'value',\r\n                get: => @el.value,\r\n                set: (v) => @el.value = v\r\n\r\n    class Button extends FormControl\r\n        constructor: (el) ->\r\n            super(el, 'button')\r\n            el.classList.add 'wm-btn'\r\n            type = el.getAttribute 'type'\r\n            unless type\r\n                if el.classList.contains 'wm-btn-ok'\r\n                    type = 'submit'\r\n                else\r\n                    type = 'button'\r\n                el.type = type\r\n\r\n    class Progress extends FormControl\r\n        constructor: (el) ->\r\n            super(el, 'progressbar')\r\n            el.classList.add 'wm-progress'\r\n            Object.defineProperty this, 'max',\r\n                get: => @el.max,\r\n                set: (v) => @el.max = v\r\n\r\n    class Combo extends FormControl\r\n        constructor: (el) ->\r\n            old = el\r\n            parent = el.parentNode\r\n            outer = createElement 'span', null, 'wm-cmb', old.outerHTML\r\n            parent.insertBefore outer, old\r\n            parent.removeChild old\r\n            el = outer.querySelector 'select'\r\n            super(el, null, outer)\r\n            @outer = outer\r\n\r\n    class TextBox extends FormControl\r\n        constructor: (el) ->\r\n            super(el)\r\n            el.classList.add 'wm-textbox'\r\n\r\n    class Edit extends TextBox\r\n        constructor: (el) ->\r\n            super(el)\r\n            el.classList.add 'wm-edit'\r\n\r\n    class Memo extends TextBox\r\n        constructor: (el) ->\r\n            super(el)\r\n            el.classList.add 'wm-memo'\r\n\r\n    class Group extends Control\r\n        constructor: (el) ->\r\n            super(el)\r\n            el.classList.add 'wm-grp'\r\n\r\n    class Tabs extends Control\r\n        constructor: (el) ->\r\n            super(el)\r\n            tabs = el.querySelectorAll '.wm-tab>li'\r\n            pages = el.querySelectorAll '.wm-tabpage>li'\r\n            return unless tabs.length\r\n\r\n            setRole el.querySelector('.wm-tab'), 'tablist'\r\n            setRoleAll tabs, 'tab'\r\n            setRoleAll pages, 'tabpanel'\r\n\r\n            for t, i in tabs when pages[i]\r\n                do (i) ->\r\n                    t.addEventListener 'click', ->\r\n                        for tt, j in tabs\r\n                            active = j is i\r\n                            setActive tabs[j], active\r\n                            setActive pages[j], active\r\n                        return\r\n                    , false\r\n                    return\r\n\r\n            setActive tabs[0], true\r\n            setActive pages[0], true if pages[0]\r\n\r\n    class Footer extends Control\r\n        constructor: (el) ->\r\n            super(el, 'footer')\r\n\r\n    ctlMap = {\r\n        '.wm-lbl': Label\r\n        '.wm-btn,button': Button\r\n        'select': Combo\r\n        'input:not([type]),input[type=text],input[type=password],input[type=email]': Edit\r\n        'textarea': Memo\r\n        'fieldset': Group\r\n        '.wm-tabs': Tabs\r\n        'progress': Progress\r\n        '.wm-footer': Footer\r\n    }\r\n\r\n    class FakeMap\r\n        constructor: ->\r\n            @lastIndex = 0\r\n            @map = {}\r\n            @attr = 'data-fmap-' + Date.now()\r\n\r\n        get: (el) ->\r\n            val = el.getAttribute @attr\r\n            (val and @map[val]) or null\r\n\r\n        set: (el, value) ->\r\n            val = el.getAttribute @attr\r\n            unless val\r\n                val = ++@lastIndex\r\n                el.setAttribute @attr, val\r\n            @map[val] = value\r\n            return\r\n\r\n    class Dialog\r\n        constructor: (owner, el) ->\r\n            @owner = owner\r\n            @el = el\r\n            @active = false\r\n            @centre = true\r\n            @map = new FakeMap()\r\n            @onResize = =>\r\n                @_autoMove()\r\n                return\r\n\r\n            setRole el, if owner.modal then 'alertdialog' else 'dialog'\r\n\r\n            el.addEventListener 'mousedown', (e) =>\r\n                @_activate e\r\n                return\r\n            , false\r\n\r\n            new Caption(owner, el).on 'wm.close', =>\r\n                @close()\r\n                return\r\n\r\n            body = el.querySelector '.wm-body'\r\n            for selector of ctlMap\r\n                T = ctlMap[selector]\r\n                for e in body.querySelectorAll selector\r\n                    cls = new T(e)\r\n                    @_accessData cls.el, cls\r\n\r\n            @_setResizeListener()\r\n            @_autoMove()\r\n            el.classList.add 'wm-shown'\r\n\r\n        equals: (src) ->\r\n            @el.isSameNode src.el\r\n\r\n        close: ->\r\n#           if @trigger 'wm.closing'\r\n            @owner._deleteDialog this\r\n            window.removeEventListener 'resize', @onResize, false\r\n            this\r\n\r\n        move: (x, y) ->\r\n            @centre = false\r\n            @_setResizeListener()\r\n            @owner._moveElement @el, x, y\r\n            this\r\n\r\n        resize: (cx, cy) ->\r\n            @owner._resizeElement @el, cx, cy\r\n            @_autoMove()\r\n            this\r\n\r\n        activate: ->\r\n            @_activate()\r\n            this\r\n\r\n        find: (selector) ->\r\n            e = @el.querySelector selector\r\n            e and @_accessData e\r\n\r\n        findAll: (selector) ->\r\n            result = []\r\n            for e in @el.querySelectorAll selector\r\n                c = @_accessData e\r\n                result.push c if c?\r\n            result\r\n\r\n        bind: (selector, type, listener) ->\r\n            @findAll(selector).forEach (c) =>\r\n                c.on type, listener\r\n                return\r\n            this\r\n\r\n        unbind: (selector, type, listener) ->\r\n            @findAll(selector).forEach (c) =>\r\n                c.off type, listener\r\n                return\r\n            this\r\n\r\n        _accessData: (el, val) ->\r\n            if val == undefined\r\n                return @map.get el\r\n            @map.set el, val\r\n            return\r\n\r\n        _activate: (evt) ->\r\n            @owner._bringToTop this, evt\r\n            return\r\n\r\n        _isChildOrSelf: (src) ->\r\n            @el.isSameNode(src) or @el.contains(src)\r\n\r\n        _setState: (zi, active, evt) ->\r\n            if @el.style.zIndex isnt zi\r\n                @el.style.zIndex = zi\r\n            if @active != active\r\n                @active = active\r\n                setActive @el, active\r\n                if active\r\n                    if evt?\r\n                        evt.target.focus()\r\n                    else\r\n                        first = @el.querySelector('.wm-ctl-form')\r\n                        first.focus() if first?\r\n            return\r\n\r\n        _autoMove: () ->\r\n            @owner._moveToCentre @el if @centre\r\n            return\r\n\r\n        _setResizeListener: () ->\r\n            if @centre\r\n                window.addEventListener 'resize', @onResize, false\r\n            else\r\n                window.removeEventListener 'resize', @onResize, false\r\n            return\r\n\r\n    window.Desktop = Desktop\r\n","(function(window, document) {\n  var Button, Caption, Combo, Control, Desktop, Dialog, Edit, EventHandler, FakeMap, Footer, FormControl, Group, Label, MAX_DLGS, Memo, Progress, Tabs, TextBox, ZIND_FIRST, createElement, createEvent, createTextNode, ctlMap, isActive, setActive, setRole, setRoleAll;\n  ZIND_FIRST = 10000;\n  MAX_DLGS = 100;\n  createElement = function(tag, parent, cls, html, attrs) {\n    var e, k, p, v;\n    e = document.createElement(tag);\n    e.className = cls;\n    if (typeof html === 'string') {\n      e.innerHTML = html;\n    } else {\n      attrs = html;\n    }\n    if (attrs) {\n      for (k in attrs) {\n        v = attrs[k];\n        if (k === 'css') {\n          for (p in v) {\n            e.style[p] = v[p];\n          }\n        } else {\n          e.setAttribute(k, v);\n        }\n      }\n    }\n    if (parent != null) {\n      parent.appendChild(e);\n    }\n    return e;\n  };\n  createTextNode = function(text, parent) {\n    var node;\n    node = document.createTextNode(text);\n    parent.appendChild(node);\n    return node;\n  };\n  setRole = function(el, role) {\n    el.setAttribute('role', role);\n  };\n  setRoleAll = function(el, role) {\n    var e, l, len;\n    for (l = 0, len = el.length; l < len; l++) {\n      e = el[l];\n      setRole(e, role);\n    }\n  };\n  isActive = function(el) {\n    return el.classList.contains('wm-active');\n  };\n  setActive = function(el, active) {\n    // IE doesn't support classList.toggle()\n    el.classList[active ? 'add' : 'remove']('wm-active');\n  };\n  createEvent = function(type) {\n    var evt;\n    evt = document.createEvent('Event');\n    evt.initEvent(type, false, true);\n    return evt;\n  };\n  EventHandler = class EventHandler {\n    constructor(el1) {\n      var self;\n      this.el = el1;\n      self = this;\n      this.list = {};\n      this.dispatcher = function(e) {\n        var l, len, listener, ref, results;\n        ref = self.list[e.type];\n        results = [];\n        for (l = 0, len = ref.length; l < len; l++) {\n          listener = ref[l];\n          results.push(listener.call(self, e));\n        }\n        return results;\n      };\n    }\n\n    on(type, listener) {\n      if (!this.list[type]) {\n        this.list[type] = [];\n        this.el.addEventListener(type, this.dispatcher, false);\n      }\n      this.list[type].push(listener);\n      return this;\n    }\n\n    off(type, listener) {\n      var a, index;\n      if (this.list[type]) {\n        a = this.list[type];\n        index = a.indexOf(listener);\n        if (index !== -1) {\n          a.splice(index, 1);\n          if (!a.length) {\n            this.list[type] = void 0;\n            this.el.removeEventListener(type, this.dispatcher, false);\n          }\n        }\n      }\n      return this;\n    }\n\n    trigger(event) {\n      if (typeof event === 'string') {\n        event = createEvent(event);\n      }\n      this.el.dispatchEvent(event);\n      return this;\n    }\n\n  };\n  Desktop = class Desktop {\n    constructor(opts) {\n      opts = opts || {};\n      this.parent = opts.node || document.body;\n      this.zindex = opts.owner ? opts.owner.zindex + 1 : 0;\n      this.owner = opts.owner;\n      this.list = [];\n      this.modal = !!(opts.modal || opts.owner);\n      this.desktop = null;\n      this.overlay = null;\n      this.active = true;\n    }\n\n    _getClientSize() {\n      var s;\n      s = {};\n      if (document.body) {\n        if (!(this.desktop && this.desktop.parentNode)) {\n          this.desktop = createElement('div', this.parent, 'wm-desktop');\n        }\n        s = typeof window.getComputedStyle === \"function\" ? window.getComputedStyle(this.desktop) : void 0;\n      }\n      return {\n        width: parseInt(s.width) || window.innerWidth,\n        height: parseInt(s.height) || window.innerHeight\n      };\n    }\n\n    _moveElement(el, x, y) {\n      var style;\n      style = el.style;\n      if (typeof x === 'number') {\n        x += 'px';\n      }\n      if (typeof y === 'number') {\n        y += 'px';\n      }\n      style.left = x;\n      style.top = y;\n      this._adjustLocation(el);\n    }\n\n    _resizeElement(el, cx, cy) {\n      var style;\n      style = el.style;\n      if (typeof cx === 'number') {\n        cx += 'px';\n      }\n      style.width = cx;\n      if (cy != null) {\n        if (typeof cy === 'number') {\n          cy += 'px';\n        }\n        style.height = cy;\n      }\n      this._adjustLocation(el);\n    }\n\n    _moveToCentre(el) {\n      var rect, size, x, y;\n      rect = el.getBoundingClientRect();\n      size = this._getClientSize();\n      x = ((size.width - rect.width) / 2) | 0;\n      y = ((size.height - rect.height) / 2) | 0;\n      this._moveElement(el, x, y);\n    }\n\n    _adjustLocation(el) {\n      var rect, size, x, y;\n      x = el.offsetLeft;\n      y = el.offsetTop;\n      rect = el.getBoundingClientRect();\n      size = this._getClientSize();\n      if (x + rect.width > size.width) {\n        x = size.width - rect.width;\n      }\n      if (x < 0) {\n        x = 0;\n      }\n      if (y + rect.height > size.height) {\n        y = size.height - rect.height;\n      }\n      if (y < 0) {\n        y = 0;\n      }\n      el.style.left = x + 'px';\n      el.style.top = y + 'px';\n    }\n\n    indexOf(dlg) {\n      var d, i, l, len, ref;\n      ref = this.list;\n      for (i = l = 0, len = ref.length; l < len; i = ++l) {\n        d = ref[i];\n        if (d.equals(dlg)) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n    newDialog(body, opts) {\n      var dlg, el, t, title;\n      if (this.list.length >= (MAX_DLGS - 1)) {\n        throw 'Maximum windows exceeded';\n      }\n      if (this.modal && !this.overlay) {\n        this.overlay = createElement('div', this.parent, 'wm-modal', {\n          css: {\n            zIndex: this._zIndex(0)\n          }\n        });\n      }\n      if (!body) {\n        return;\n      }\n      title = (opts != null ? opts.title : void 0) != null ? opts.title : opts;\n      if (title == null) {\n        title = document.title;\n      }\n      el = createElement('form', this.parent, 'wm-dlg');\n      t = createElement('div', el, 'wm-title');\n      createTextNode(title, t);\n      createElement('div', el, 'wm-body', body);\n      dlg = new Dialog(this, el);\n      this.list.push(dlg);\n      this._update();\n      return dlg;\n    }\n\n    destroy() {\n      var dlg, l, len, ref;\n      ref = this.list;\n      for (l = 0, len = ref.length; l < len; l++) {\n        dlg = ref[l];\n        this.parent.removeChild(dlg.el);\n      }\n      this._destroyInternal();\n    }\n\n    _deleteDialog(dlg) {\n      var index;\n      index = this.indexOf(dlg);\n      if (index !== -1) {\n        this.parent.removeChild(dlg.el);\n        this.list.splice(index, 1);\n        this._update();\n        if (this.list.length === 0) {\n          this._destroyInternal();\n        }\n      }\n    }\n\n    _destroyInternal() {\n      if (this.desktop) {\n        this.parent.removeChild(this.desktop);\n        this.desktop = null;\n      }\n      if (this.overlay) {\n        this.parent.removeChild(this.overlay);\n        this.overlay = null;\n      }\n    }\n\n    _bringToTop(dlg, evt) {\n      var index;\n      index = this.indexOf(dlg);\n      if (index !== -1) {\n        this.list.push(this.list.splice(index, 1)[0]);\n        this._update(evt);\n      }\n    }\n\n    _zIndex(i) {\n      return ZIND_FIRST + this.zindex * MAX_DLGS + i;\n    }\n\n    _update(evt) {\n      var d, i, l, len, ref, ub;\n      this._notifyOwner();\n      ub = this.list.length - 1;\n      ref = this.list;\n      for (i = l = 0, len = ref.length; l < len; i = ++l) {\n        d = ref[i];\n        d._setState(this._zIndex(i + 1), this.active && i >= ub, evt);\n      }\n    }\n\n    _notify(child) {\n      var active;\n      active = child.list.length === 0;\n      if (this.active !== active) {\n        this.active = active;\n        return this._update();\n      }\n    }\n\n    _notifyOwner() {\n      if (this.owner) {\n        return this.owner._notify(this);\n      }\n    }\n\n  };\n  Caption = class Caption extends EventHandler {\n    constructor(owner, el) {\n      var dragging, mouseDownHandler, mouseMoveHandler, mouseUpHandler, offset_x, offset_y, title;\n      super(el);\n      dragging = false;\n      offset_x = 0;\n      offset_y = 0;\n      title = el.querySelector('.wm-title');\n      this.close = createElement('button', title, 'wm-close', {\n        title: 'Close'\n      });\n      this.close.addEventListener('click', () => {\n        this.trigger('wm.close');\n      }, false);\n      mouseDownHandler = function(e) {\n        var elemRect, titleRect;\n        if (e.button === 0 && e.target.isSameNode(title)) {\n          titleRect = title.getBoundingClientRect();\n          elemRect = el.getBoundingClientRect();\n          dragging = true;\n          offset_x = elemRect.left - titleRect.left - e.offsetX;\n          offset_y = elemRect.top - titleRect.top - e.offsetY;\n          document.addEventListener('mousemove', mouseMoveHandler, false);\n          document.addEventListener('mouseup', mouseUpHandler, false);\n          e.preventDefault();\n        }\n      };\n      mouseMoveHandler = function(e) {\n        if (dragging) {\n          owner._moveElement(el, offset_x + e.clientX, offset_y + e.clientY);\n          e.preventDefault();\n        }\n      };\n      mouseUpHandler = function() {\n        var rect;\n        if (dragging) {\n          document.removeEventListener('mousemove', mouseMoveHandler, false);\n          document.removeEventListener('mouseup', mouseUpHandler, false);\n          rect = el.getBoundingClientRect();\n          el.style.left = rect.left + 'px';\n          el.style.top = rect.top + 'px';\n          dragging = false;\n        }\n      };\n      title.addEventListener('mousedown', mouseDownHandler, false);\n    }\n\n  };\n  Control = class Control extends EventHandler {\n    constructor(el, role, outer) {\n      super(el);\n      (outer || el).classList.add('wm-ctl');\n      if (role != null) {\n        setRole(el, role);\n      }\n    }\n\n  };\n  Label = class Label extends Control {\n    constructor(el) {\n      super(el);\n    }\n\n  };\n  FormControl = class FormControl extends Control {\n    constructor(el, role, outer) {\n      super(el, role, outer);\n      el.classList.add('wm-ctl-form');\n      Object.defineProperty(this, 'value', {\n        get: () => {\n          return this.el.value;\n        },\n        set: (v) => {\n          return this.el.value = v;\n        }\n      });\n    }\n\n  };\n  Button = class Button extends FormControl {\n    constructor(el) {\n      var type;\n      super(el, 'button');\n      el.classList.add('wm-btn');\n      type = el.getAttribute('type');\n      if (!type) {\n        if (el.classList.contains('wm-btn-ok')) {\n          type = 'submit';\n        } else {\n          type = 'button';\n        }\n        el.type = type;\n      }\n    }\n\n  };\n  Progress = class Progress extends FormControl {\n    constructor(el) {\n      super(el, 'progressbar');\n      el.classList.add('wm-progress');\n      Object.defineProperty(this, 'max', {\n        get: () => {\n          return this.el.max;\n        },\n        set: (v) => {\n          return this.el.max = v;\n        }\n      });\n    }\n\n  };\n  Combo = class Combo extends FormControl {\n    constructor(el) {\n      var old, outer, parent;\n      old = el;\n      parent = el.parentNode;\n      outer = createElement('span', null, 'wm-cmb', old.outerHTML);\n      parent.insertBefore(outer, old);\n      parent.removeChild(old);\n      el = outer.querySelector('select');\n      super(el, null, outer);\n      this.outer = outer;\n    }\n\n  };\n  TextBox = class TextBox extends FormControl {\n    constructor(el) {\n      super(el);\n      el.classList.add('wm-textbox');\n    }\n\n  };\n  Edit = class Edit extends TextBox {\n    constructor(el) {\n      super(el);\n      el.classList.add('wm-edit');\n    }\n\n  };\n  Memo = class Memo extends TextBox {\n    constructor(el) {\n      super(el);\n      el.classList.add('wm-memo');\n    }\n\n  };\n  Group = class Group extends Control {\n    constructor(el) {\n      super(el);\n      el.classList.add('wm-grp');\n    }\n\n  };\n  Tabs = class Tabs extends Control {\n    constructor(el) {\n      var i, l, len, pages, t, tabs;\n      super(el);\n      tabs = el.querySelectorAll('.wm-tab>li');\n      pages = el.querySelectorAll('.wm-tabpage>li');\n      if (!tabs.length) {\n        return;\n      }\n      setRole(el.querySelector('.wm-tab'), 'tablist');\n      setRoleAll(tabs, 'tab');\n      setRoleAll(pages, 'tabpanel');\n      for (i = l = 0, len = tabs.length; l < len; i = ++l) {\n        t = tabs[i];\n        if (pages[i]) {\n          (function(i) {\n            t.addEventListener('click', function() {\n              var active, j, len1, m, tt;\n              for (j = m = 0, len1 = tabs.length; m < len1; j = ++m) {\n                tt = tabs[j];\n                active = j === i;\n                setActive(tabs[j], active);\n                setActive(pages[j], active);\n              }\n            }, false);\n          })(i);\n        }\n      }\n      setActive(tabs[0], true);\n      if (pages[0]) {\n        setActive(pages[0], true);\n      }\n    }\n\n  };\n  Footer = class Footer extends Control {\n    constructor(el) {\n      super(el, 'footer');\n    }\n\n  };\n  ctlMap = {\n    '.wm-lbl': Label,\n    '.wm-btn,button': Button,\n    'select': Combo,\n    'input:not([type]),input[type=text],input[type=password],input[type=email]': Edit,\n    'textarea': Memo,\n    'fieldset': Group,\n    '.wm-tabs': Tabs,\n    'progress': Progress,\n    '.wm-footer': Footer\n  };\n  FakeMap = class FakeMap {\n    constructor() {\n      this.lastIndex = 0;\n      this.map = {};\n      this.attr = 'data-fmap-' + Date.now();\n    }\n\n    get(el) {\n      var val;\n      val = el.getAttribute(this.attr);\n      return (val && this.map[val]) || null;\n    }\n\n    set(el, value) {\n      var val;\n      val = el.getAttribute(this.attr);\n      if (!val) {\n        val = ++this.lastIndex;\n        el.setAttribute(this.attr, val);\n      }\n      this.map[val] = value;\n    }\n\n  };\n  Dialog = class Dialog {\n    constructor(owner, el) {\n      var T, body, cls, e, l, len, ref, selector;\n      this.owner = owner;\n      this.el = el;\n      this.active = false;\n      this.centre = true;\n      this.map = new FakeMap();\n      this.onResize = () => {\n        this._autoMove();\n      };\n      setRole(el, owner.modal ? 'alertdialog' : 'dialog');\n      el.addEventListener('mousedown', (e) => {\n        this._activate(e);\n      }, false);\n      new Caption(owner, el).on('wm.close', () => {\n        this.close();\n      });\n      body = el.querySelector('.wm-body');\n      for (selector in ctlMap) {\n        T = ctlMap[selector];\n        ref = body.querySelectorAll(selector);\n        for (l = 0, len = ref.length; l < len; l++) {\n          e = ref[l];\n          cls = new T(e);\n          this._accessData(cls.el, cls);\n        }\n      }\n      this._setResizeListener();\n      this._autoMove();\n      el.classList.add('wm-shown');\n    }\n\n    equals(src) {\n      return this.el.isSameNode(src.el);\n    }\n\n    close() {\n      //           if @trigger 'wm.closing'\n      this.owner._deleteDialog(this);\n      window.removeEventListener('resize', this.onResize, false);\n      return this;\n    }\n\n    move(x, y) {\n      this.centre = false;\n      this._setResizeListener();\n      this.owner._moveElement(this.el, x, y);\n      return this;\n    }\n\n    resize(cx, cy) {\n      this.owner._resizeElement(this.el, cx, cy);\n      this._autoMove();\n      return this;\n    }\n\n    activate() {\n      this._activate();\n      return this;\n    }\n\n    find(selector) {\n      var e;\n      e = this.el.querySelector(selector);\n      return e && this._accessData(e);\n    }\n\n    findAll(selector) {\n      var c, e, l, len, ref, result;\n      result = [];\n      ref = this.el.querySelectorAll(selector);\n      for (l = 0, len = ref.length; l < len; l++) {\n        e = ref[l];\n        c = this._accessData(e);\n        if (c != null) {\n          result.push(c);\n        }\n      }\n      return result;\n    }\n\n    bind(selector, type, listener) {\n      this.findAll(selector).forEach((c) => {\n        c.on(type, listener);\n      });\n      return this;\n    }\n\n    unbind(selector, type, listener) {\n      this.findAll(selector).forEach((c) => {\n        c.off(type, listener);\n      });\n      return this;\n    }\n\n    _accessData(el, val) {\n      if (val === void 0) {\n        return this.map.get(el);\n      }\n      this.map.set(el, val);\n    }\n\n    _activate(evt) {\n      this.owner._bringToTop(this, evt);\n    }\n\n    _isChildOrSelf(src) {\n      return this.el.isSameNode(src) || this.el.contains(src);\n    }\n\n    _setState(zi, active, evt) {\n      var first;\n      if (this.el.style.zIndex !== zi) {\n        this.el.style.zIndex = zi;\n      }\n      if (this.active !== active) {\n        this.active = active;\n        setActive(this.el, active);\n        if (active) {\n          if (evt != null) {\n            evt.target.focus();\n          } else {\n            first = this.el.querySelector('.wm-ctl-form');\n            if (first != null) {\n              first.focus();\n            }\n          }\n        }\n      }\n    }\n\n    _autoMove() {\n      if (this.centre) {\n        this.owner._moveToCentre(this.el);\n      }\n    }\n\n    _setResizeListener() {\n      if (this.centre) {\n        window.addEventListener('resize', this.onResize, false);\n      } else {\n        window.removeEventListener('resize', this.onResize, false);\n      }\n    }\n\n  };\n  return window.Desktop = Desktop;\n})(window, document);\n"]}